#include <iostream>
#include <Windows.h>

#include "Visitor.h"
/*
	Вариант 4
	В рамках задачи требуется написать программу, которая будет анализировать текст произведений.

	Библиотека:
		Библиотека содержит набор книг.
		Каталог содержит не более 30 книг.
	Книга:
		Каждая книга имеет наименование, объем, возрастные ограничения, оценки от читателей.
		Книги разделяются на жанры, например: Детектив, Любовный роман, Фентези, Фантастика.
		Книга может быть прочитана посетителем и оценена. Оценка сохраняется в список оценок.
		Книга содержит автора.
	Посетитель:
		Посетитель имеет определенный возраст, что не дает ему брать книги не подходящие под ограничения.
		Посетитель может иметь предпочтения по объему книги (большая > 500, маленькая < 100, средняя) и по жанру.
		Предпочтения по объему и жанру могут меняться от запроса к запросу.
		Посетители читают с не одинаковой скоростью.
		Посетители не читают одну и ту же книгу дважды.
	
	Реализовать класс Библиотека, Книга, Посетитель.
	Реализовать метод генерации каталога книг разного объема, авторов, жанров и ограничений.
	Реализовать метод поиска нужной книги по критериям отбора: возраст посетителя, предпочтительный объем, жанр, при этом должна браться первая книга.
	Реализовать метод чтения книги посетителем. Длительность чтения зависит от объема книги и скорости чтения отдельного посетителя.
	Реализовать метод запроса посетителем книги из библиотеки и ее прочтения.
	(Усложненный вариант) Реализовать процесс работы библиотеки на протяжении 30 дней.
	Каждый день в библиотеку должны приходить от 1 до 5 посетителей, из набора посетителей, в процессе работы посетители могут появляться.
	Каждый посетитель обязательно берет одну книгу в момент посещения. Книга выбирается методом подбора нужной книги из 2 пункта.
	Посетитель не появляется в библиотеки если он занят чтением книги, после чтения книги он ставит ей оценку и возвращает ее до своего следующего посещения.
	Если время моделирование закончилось, а посетитель не вернул книгу, то процесс чтения завершается и книге ставится оценка.
	По результатам моделирования требуется вывести статистику:
	Количество взятия каждой из книг каталога.
	Среднюю арифметическую оценку книги на основании отзывов посетителей.
	Среднее арифметическое время чтения книги посетителями.
	Количество взятия книг на каждого автора.
*/
int main()
{
	SetConsoleCP(1251);         // Выставляем ввод кириллицы
	SetConsoleOutputCP(1251);   // Выставляем вывод кириллицы

	srand(time(NULL));

	Library* library = new Library();

	const int days = 30;	// Симуляция 30 дней
	const int hours = 10;	// Библиотека работает 10 часов в день

	const int read_for = 1; // Снимаем статистику раз в час

	std::vector<Visitor*> visitors;

	const int max_count_of_visitors = 5;
	const int min_count_of_visitors = 1;

	int last_visitor_id = 0;
	for (int day = 1; day <= days; day++)
	{
		int count_of_visitors = rand() % (max_count_of_visitors - min_count_of_visitors) + min_count_of_visitors;
		for (int i = 0; i < count_of_visitors; i++)
			visitors.push_back(new Visitor(last_visitor_id++));

		for (int hour = 1; hour <= hours; hour++)
		{
			float chance_of_new_visitor = 1.0f * rand() / RAND_MAX;

			if (chance_of_new_visitor < 0.1f)
				visitors.push_back(new Visitor(last_visitor_id++));

			for (auto& visitor : visitors)
			{
				if (!visitor->isReading())
					visitor->goTakeBook(library);

				visitor->readBook(read_for, library);
			}
		}
	}

	for (auto& visitor : visitors)
	{
		if (visitor->isReading())
			visitor->returnBook(library);

		visitor->printInfo();
		delete visitor;
	}
	visitors.clear();

	// Считаем количество взятий книг у конкретного автора
	std::map<std::string, int> authors;
	for (auto it = library->books.begin(); it != library->books.end(); it++)
		authors[it->second->getAuthor()] += it->second->getCountOfUse();

	std::cout << "COUNT OF TAKES BY AUTHORS:\n";
	for (auto it = authors.begin(); it != authors.end(); it++)
		std::cout << it->first << ": " << it->second << "\n";

	for (auto& it : library->books)
	{
		it.second->calculateResults();
		it.second->printInfo();
	}

	delete library;

	return 0;
}
