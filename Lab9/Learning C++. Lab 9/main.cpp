#include <algorithm>
#include <vector>
#include <iterator>

#include "Functions.h"

// –ù–ï –ë–ï–ô–¢–ï, –£–î–û–ë–ù–û –î–õ–Ø –î–ï–ë–ê–ì–ê! (ü§°ü§°ü§°ü§°)
#define TYPE float
#define LEFT -15.0f
#define RIGHT 15.0f

/**
 * –í–∞—Ä–∏–∞–Ω—Ç 3
 * –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –∫–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω–µ–Ω–∏—è –≤ –æ–±—â–µ–π —Ñ–æ—Ä–º–µ.
 * –ö–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —à–∞–±–ª–æ–Ω–Ω—ã–º –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–ª—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –∏ –∫–æ—Ä–Ω–µ–π.
 * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Å–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —É—Ä–æ–≤–∞–≤–Ω–µ–Ω–∏—è –∏ –Ω–∞—Ö–æ–¥–∏—Ç –∫–æ—Ä–Ω–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è.
 * –ò–∑–º–µ–Ω—è—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏ –∫–æ—Ä–Ω–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –∫–ª–∞—Å—Å–∞ –Ω–µ–ª—å–∑—è.
 * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å N –æ–±—ä–µ–∫—Ç–æ–≤ –∫–ª–∞—Å—Å–∞, –∑–∞–ø–∏—Å–∞–≤ –∏—Ö –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä.
 * –ü–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é - –æ–ø–µ—Ä–∞—Ç–æ—Ä –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ—Ç–æ–∫, –∏ –≤—ã–≤–µ—Å—Ç–∏
 *  –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.
 * –° –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç,
 *  –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ –∫–æ—Ä–Ω–µ–π –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ—Ä–µ–Ω—å.
 * –° –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç
 *  –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–Ω–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–µ–Ω—å—à–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ—Ä–Ω—è. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—è–º–±–¥–∞-–≤—ã—Ä–∞–∂–µ–Ω–∏–µ.
 * (–£—Å–ª–æ–∂–Ω–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç) –°–¥–µ–ª–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–±–µ—Ä–∞—è –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –≤ –∫–æ—Ç–Ω–µ–π–Ω–µ—Ä–µ,
 *  —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –≤–µ–∫—Ç–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ—Ä–Ω–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–µ—Ç–æ–¥–æ–≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.
 * (–£—Å–ª–æ–∂–Ω–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç) –°–¥–µ–ª–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —É—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ –∫–æ—Ç–µ–π–Ω–µ—Ä–µ –ø–æ
 *  –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Å—É–º–º—ã –º–æ–¥—É–ª–µ–π –∫–æ—Ä–Ω–µ–π.
 */
int main(void)
{
    const int N = 5;

    std::vector<QuadraticEquation<TYPE>> vec =
        generate<TYPE, std::vector<QuadraticEquation<TYPE>>>(N, LEFT, RIGHT);

    vec.push_back(vec[N - 1]);
    vec.push_back(vec[N - 1]);

    std::cout << "Generated vector:\n";
    std::copy(vec.begin(), vec.end(),
        std::ostream_iterator<QuadraticEquation<TYPE>>(std::cout, "\n"));

    TYPE num[2];
    std::cout << "Input a root (a and b parts, if it's non complex the second part must be 0): ";
    std::cin >> num[0] >> num[1];
    num[0] = round(num[0] * ROUND_TO) / ROUND_TO;
    num[1] = round(num[1] * ROUND_TO) / ROUND_TO;
    std::cout << "\n";

    QuadraticEquation<TYPE> found = findByUserNum(num, vec);

    std::cout << "Equation, that has a root as user's root:\n";
    if (found.isEmpty())
        std::cout << "NOT FOUND!\n";
    else
        std::cout << found << "\n";

    std::cout << "Count of roots lower than user's root: " << findCountOfRootsLowerNum(num, vec) << "\n";

    auto new_vec =
        uniqueVector(vec);

    std::cout << "Unique vector:\n";
    std::copy(new_vec.begin(), new_vec.end(),
        std::ostream_iterator<QuadraticEquation<TYPE>>(std::cout, "\n"));

    sortByRoots(new_vec);

    std::cout << "Sorted unique:\n";
    std::copy(new_vec.begin(), new_vec.end(),
        std::ostream_iterator<QuadraticEquation<TYPE>>(std::cout, "\n"));

    return 0;
}
